input = """..................................3.........H.....
..............F............................CK.....
..................F...e...m..........C.Ki.........
......1..................m........................
.........F.1......................................
.......1.....W...........3..Z............i........
...........W...m....1.............................
......W...........m..............N..C.............
E............2................Z.K.......p.........
.....Y.........4....i.........N...................
..............W.Y....................3..9....i....
.................................h........9.......
.........................................Z.......H
2...............................3.......H9........
..2..........4T...................................
...2..............Y...4........Z..................
.........E.........................N...5..........
.......................................e..........
..............................C...................
..E..................P.....................p.H....
......4............................IN......h.p....
..........................T....M.........K..p.....
..........................G.......................
..................................................
...................................M..............
.5.............G..............M...................
.............Y..........................M.........
.................E8...0.........................h.
.............................P............g.......
......5...........................................
.............n.................................c..
...............................g....f.......c.....
.y..............8...t....T........................
..7..F.............T........R..........f........u.
.kz.......7..R....................................
.........8..................U.........P...........
......U.............wG....v.....P.............c...
...0.....R..........g.............................
.....7.....8.........g.............f..............
....z...........G................7................
........5........6.v.....U..f.......u........e....
.........V....v........6......t...................
......6..0..y.....R........V...........r..........
...........v.......we..U.............c..r.........
................................r.......Iu........
k............y6..........t.................r...I..
........k............t...........w................
.............z....n.................I.............
..0.................n.............................
...............n..........V...........y........u.."""

# input = """............
# ........0...
# .....0......
# .......0....
# ....0.......
# ......A.....
# ............
# ............
# ........A...
# .........A..
# ............
# ............"""

# input = """..........
# ..........
# ..........
# ....a.....
# ..........
# .....a....
# ..........
# ..........
# ..........
# .........."""

# input = """T.........
# ...T......
# .T........
# ..........
# ..........
# ..........
# ..........
# ..........
# ..........
# .........."""

from itertools import chain, product, combinations, repeat
from math import sqrt

input = input.split("\n")


def print_map(map):
    if isinstance(map[0], str):
        for i in map:
            print(i)
    else:
        for i in map:
            print("".join(i))


def compute_antinode1(map, f, antinodes):
    towers = [
        (r, c) for r in range(len(map)) for c in range(len(map[r])) if map[r][c] == f
    ]
    # for each pair of towers, compute the two antinode points:
    for (ra, ca), (rb, cb) in combinations(towers, 2):
        print(f"{ra},{ca} -> {rb},{cb}")
        # direction from a to b is:
        d = (rb - ra, cb - ca)
        print(f"d = {d}")
        # first point is 1 step past b:
        p0 = (rb + d[0], cb + d[1])
        # second point is 1 step before a:
        p1 = (ra - d[0], ca - d[1])
        print(f"      {p0}, {p1}")

        # update the antinode map:
        def mark(map, p, v):
            r, c = p
            if r >= 0 and r < len(map) and c >= 0 and c < len(map[r]):
                map[r][c] = v

        mark(antinodes, p0, "#")
        mark(antinodes, p1, "#")


def compute_antinodes1():
    antinodes = [["."] * len(i) for i in input]
    frequencies = set(chain(*input))
    frequencies.remove(".")
    print(frequencies)
    for f in frequencies:
        # create a map with only the frequencies
        # in question:
        map = [["." if c != f else f for c in s] for s in input]
        compute_antinode1(map, f, antinodes)

    return antinodes


antinodes = compute_antinodes1()
print_map(antinodes)

print(sum([1 for r in antinodes for c in r if c == "#"]))


def compute_antinode2(map, f, antinodes):
    towers = [
        (r, c) for r in range(len(map)) for c in range(len(map[r])) if map[r][c] == f
    ]
    # for each pair of towers, compute the two antinode points:
    for (ra, ca), (rb, cb) in combinations(towers, 2):
        print(f"{ra},{ca} -> {rb},{cb}")
        # direction from a to b is:
        d = (rb - ra, cb - ca)
        print(f"d = {d}")

        # stepping past b:
        r, c = (rb, cb)
        while r >= 0 and r < len(map) and c >= 0 and c < len(map[r]):
            antinodes[r][c] = "#"
            r, c = (r + d[0], c + d[1])

        # stepping before a:
        r, c = (ra, ca)
        while r >= 0 and r < len(map) and c >= 0 and c < len(map[r]):
            antinodes[r][c] = "#"
            r, c = (r - d[0], c - d[1])


def compute_antinodes2():
    antinodes = [["."] * len(i) for i in input]
    frequencies = set(chain(*input))
    frequencies.remove(".")
    print(frequencies)
    for f in frequencies:
        # create a map with only the frequencies
        # in question:
        map = [["." if c != f else f for c in s] for s in input]
        map = ["".join(i) for i in map]
        compute_antinode2(map, f, antinodes)

    return antinodes


antinodes = compute_antinodes2()
print_map(antinodes)

print(sum([1 for r in antinodes for c in r if c == "#"]))
